/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ebookparser;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.SortedMap;
import java.util.TreeMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Alex
 */
public class GUI extends javax.swing.JFrame {

    ArrayList<String> array;
    Book book = new Book();

    /**
     * Creates new form GUI
     */
    public GUI() {
        initComponents();
        tableOfWords.setAutoCreateRowSorter(true);
        readBook();
        writeBook();
        addTableData();
        tableOfWords.getRowSorter().toggleSortOrder(1);
    }

    public void writeBook() {
        for (String s : array) {
            bookArea.append(s + "\n");
        }

    }

    public void readBook() {
        //"C:\Users\Alex\Documents\Calibre Library\J.K. Rowling\Harry Potter and the Cursed Child (2)\Harry Potter and the Cursed Chi - J.K. Rowling.txt"
        //"C:\Users\Alex\Documents\Calibre Library\Patrick Rothfuss\The Slow Regard of Silent Things_ A (4)\The Slow Regard of Silent Thing - Patrick Rothfuss.txt"

        File f1 = new File("C:\\Users\\Alex\\Documents\\Calibre Library\\Patrick Rothfuss\\The Slow Regard of Silent Things_ A (4)\\The Slow Regard of Silent Thing - Patrick Rothfuss.txt");
        int lines = 0;
        array = new ArrayList();

        if (f1.exists()) {
            
                String currentLine;
                InputStreamReader isr;
				try {
					isr = new InputStreamReader(new FileInputStream(f1));
				 
                BufferedReader br = new BufferedReader(isr);
                while ((currentLine = br.readLine()) != null) {
                    readLine(currentLine);
                    lines++;
                }
				}
				catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
                numberOfLinesField.setText(Integer.toString(lines));
            }
        
    }

    public static final String LDQUOTE_STRING = "\u201C";
    public static final String RDQUOTE_STRING = "\u201D";
    public static final char RDQUOTE = '\u201D';
    public static final char LDQUOTE = '\u201C';
    
    public void readLine(String line) {    
        String str="";
        StringBuilder sb= new StringBuilder("");
//        if(line.contains(LDQUOTE_STRING)){
//            char[] c = line.toCharArray();
//            for(char ch : c){
//                if(ch == LDQUOTE){
//                    int i = line.indexOf(LDQUOTE);
//                    sb = new StringBuilder(line);
//                    sb.deleteCharAt(i);                    
//                }
//            }  
//            str = sb.toString();
//            str.replaceAll("[©0-9!?,.@_():;-]", "");
//        }
//        else if (line.contains(RDQUOTE_STRING)){
//            char[] c = line.toCharArray();
//            for(char ch : c){
//                if(ch == RDQUOTE){
//                    int i = line.indexOf(RDQUOTE);
//                    sb = new StringBuilder(line);
//                    sb.deleteCharAt(i);
//                }
//            }  
//            str = sb.toString();
//            str.replaceAll("[©0-9!?,.@_():;-]", "");
//            
//        }
        //else {
            str = line.replaceAll("[©0-9!?,.@_():;-]", "");
       // }      
        
        String[] words = str.split("\\s+");     
        for (String s : words) {
            String toLC = s.toLowerCase();
            book.wordExists(toLC);
        }
    }

    public void addRow(String name, int numberOfTimes) {
        DefaultTableModel model = (DefaultTableModel) tableOfWords.getModel();
        model.addRow(new Object[]{name, numberOfTimes});
    }
    
    public void addTableData() {
        SortedMap<String, Integer> arrayOfWords = book.getHashMap();
        int totalWords=0;
        for (HashMap.Entry<String, Integer> entry : arrayOfWords.entrySet()) {
            String S = entry.getKey();
            Integer I = entry.getValue();
            addRow(S, I);
            totalWords = totalWords + I;
        }
        totalWordsField.setText(Integer.toString(totalWords));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        bookArea = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        numberOfLinesField = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        tableOfWords = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        totalWordsField = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(1200, 800));

        bookArea.setColumns(20);
        bookArea.setRows(5);
        jScrollPane1.setViewportView(bookArea);

        jLabel1.setText("Numberof Lines:");

        tableOfWords.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Word", "Number of Times Mentioned"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tableOfWords);
        if (tableOfWords.getColumnModel().getColumnCount() > 0) {
            tableOfWords.getColumnModel().getColumn(0).setResizable(false);
        }

        jLabel2.setText("Total Words:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(numberOfLinesField, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(totalWordsField))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 305, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 271, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 601, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(numberOfLinesField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2)
                            .addComponent(totalWordsField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 791, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUI.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUI.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUI.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUI.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea bookArea;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField numberOfLinesField;
    private javax.swing.JTable tableOfWords;
    private javax.swing.JTextField totalWordsField;
    // End of variables declaration//GEN-END:variables
}
